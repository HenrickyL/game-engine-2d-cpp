#ifndef DXUT_AI_ISTATE_H
#define DXUT_AI_ISTATE_H
//------------------------------------------
#include<vector>
#include <string>
using std::vector;
//------------------------------------------
template<typename T>
class Transition;
template<typename T>
class Action;
//------------------------------------------
template<typename T>
class State {
protected:
	std::string name;
	vector<Transition<T>*>* edges;
	void DeleteEdges();
	///**
	//* @brief Returns whether the state generated by an action is valid
	//* @return true if is valid
	//*/
public:
	State();
	State(std::string name);
	//~State();


	vector<Transition<T>*>* Edges() const;
	std::string Name() const;
	void AddTransition(Transition<T>* transition);

	//------------------------------------------
	virtual float GetHeuristic(State<T>* target) const;
	virtual bool IsGeneratedPossible() const = 0;
	virtual bool Equal(State<T>* other)const = 0;
	/**
	* @brief If possible, it creates a state in Edge from an action.
	*/
	virtual void Generate(const vector<Action<T>*> actions) = 0;

	virtual bool IsAmbiguous(State<T>* newState) const = 0;
	//------------------------------------------

	bool ExistActionInEdge(Action<T>* action);
	bool ExistInEdge(State<T>* _target) const;

};

#include "State.inl"
//------------------------------------------
//inline bool State::IsGeneratedPossible()const { return false; }
//virtual bool IsTriggered(Action* action) const = 0;
//	virtual State* GetTargetState() const = 0; // Método para obter o estado de destino da transição

#endif