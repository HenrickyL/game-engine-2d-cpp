#ifndef DXUT_AI_ISTATE_H
#define DXUT_AI_ISTATE_H
//------------------------------------------
#include<vector>
#include <string>
using std::vector;
//------------------------------------------
class Transition;
class Action;
//------------------------------------------

class State {
protected:
	std::string name;
	vector<Transition*>* edges;
	void DeleteEdges();
	///**
	//* @brief Returns whether the state generated by an action is valid
	//* @return true if is valid
	//*/
	//virtual bool IsTriggered(Action* action) const = 0;
public:
	State();
	State(std::string name);
	~State();


	vector<Transition*>* Edges() const;
	std::string Name() const;
	void AddTransition(Transition* transition);

	virtual float GetHeuristic(State* target) const;
	virtual bool IsGeneratedPossible() const = 0;
	virtual bool Equal(State* other)const = 0;
	//------------------------------------------
	/**
	* @brief If possible, it creates a state in Edge from an action.
	*/
	virtual void Generate(Action* action) = 0;

	bool ExistActionInEdge(Action* action);

//	virtual State* GetTargetState() const = 0; // Método para obter o estado de destino da transição
};

inline std::string State::Name() const { return name; }
//inline bool State::IsGeneratedPossible()const { return false; }

#endif